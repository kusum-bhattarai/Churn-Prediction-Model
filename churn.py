# -*- coding: utf-8 -*-
"""Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aH426wcK_RhHXl16HmFvyBD89rM0yCSt
"""

!pip install joblib

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import joblib

# Loading the dataset
file_path = '/content/drive/MyDrive/Customer-Churn-Records.csv'
df = pd.read_csv(file_path)
df.head()

def preprocess_data(df):
    le = LabelEncoder()
    df['Geography'] = le.fit_transform(df['Geography'])
    df['Gender'] = le.fit_transform(df['Gender'])
    df['Card Type'] = le.fit_transform(df['Card Type'])
    df['Balance_Tenure'] = df.apply(lambda row: row['Balance'] / row['Tenure'] if row['Tenure'] > 0 else 0, axis=1)
    X = df.drop(['RowNumber', 'CustomerId', 'Surname', 'Exited'], axis=1)
    y = df['Exited']
    return X, y

X, y = preprocess_data(df)

#Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Model Training
param_grid_rf = {'n_estimators': [100, 200, 300], 'max_depth': [5, 10, 15], 'min_samples_split': [2, 5, 10]}
grid_search_rf = GridSearchCV(RandomForestClassifier(), param_grid_rf, cv=5)
grid_search_rf.fit(X_train, y_train)
best_rf = grid_search_rf.best_estimator_

y_pred_rf = best_rf.predict(X_test)
accuracy_rf = accuracy_score(y_test, y_pred_rf)
precision_rf = precision_score(y_test, y_pred_rf)
recall_rf = recall_score(y_test, y_pred_rf)
f1_rf = f1_score(y_test, y_pred_rf)

print(f'Random Forest Best Parameters: {grid_search_rf.best_params_}')
print(f'Random Forest Accuracy: {accuracy_rf}')
print(f'Random Forest Precision: {precision_rf}')
print(f'Random Forest Recall: {recall_rf}')
print(f'Random Forest F1 Score: {f1_rf}')

joblib.dump(best_rf, 'churn_model_rf.pkl')
print('Random Forest model saved as churn_model_rf.pkl')